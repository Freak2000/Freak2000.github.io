<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Node.js入门</title>
      <link href="/2021/08/02/nodejs%E5%85%A5%E9%97%A8/"/>
      <url>/2021/08/02/nodejs%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Node-js入门"><a href="#Node-js入门" class="headerlink" title="Node.js入门"></a>Node.js入门</h1><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><p>Node.js 是能够在服务器端运行 JavaScript 的开放源代码、跨平台运行环境，基于Google的V8引擎。<br>如果我们使用 PHP 来编写后端的代码时，需要 Apache 或者 Nginx 的 HTTP 服务器，并配上 mod_php5 模块和 php-cgi。不过对 Node.js 来说，概念完全不一样了。使用 Node.js 时，我们不仅仅 在实现一个应用，同时还实现了整个 HTTP 服务器。事实上，我们的 Web 应用以及对应的 Web 服务器基本上是一样的。</p><p>Node.js安装地址及方法：<br>地址：<a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a><br>方法：<a href="https://www.runoob.com/nodejs/nodejs-install-setup.html">https://www.runoob.com/nodejs/nodejs-install-setup.html</a></p><h2 id="2-npm"><a href="#2-npm" class="headerlink" title="2.npm"></a>2.npm</h2><h3 id="2-1-nmp使用"><a href="#2-1-nmp使用" class="headerlink" title="2.1 nmp使用"></a>2.1 nmp使用</h3><p>npm（全称 Node Package Manager，即“node包管理器”）是一个免费的模块分享社区，是Node.js默认的、用JavaScript编写的软件包管理系统，会随着Node.js一起安装，能解决NodeJS代码部署上的很多问题。<br>官网：<a href="https://www.npmjs.com/">https://www.npmjs.com/</a><br>npm有windows系统的全局变量，在命令行输入<code>npm -v</code>可以查看到当前安装的npm版本。<br>可以用npm来引入第三方的模块，我在这里以命令行颜色输出的模块colors为例，这个模块可以使命令行里面的字的样式变成别的颜色，地址为<a href="https://www.npmjs.com/package/colors">https://www.npmjs.com/package/colors</a> ，里面有使用方法</p><ul><li>在命令行中进入到要安装模块的目录，输入命令<code>npm install colors</code><br>安装完成后会出现node_modules文件夹和package-lock.json两个东西<br><img src="/img/node1.png" alt="node1.png"></li></ul><p>node_modules里面有封装好了的模块文件。</p><ul><li>在这个目录下新建一个app.js文件<br><img src="/img/img.png" alt="img.png"></li><li>在里面输入<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> colors = <span class="built_in">require</span>(<span class="string">&#x27;colors&#x27;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;hello&#x27;</span>.green); <span class="comment">// outputs green text</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;i like cake and pies&#x27;</span>.underline.red) <span class="comment">// outputs red underlined text</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;inverse the color&#x27;</span>.inverse); <span class="comment">// inverses the color</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;OMG Rainbows!&#x27;</span>.rainbow); <span class="comment">// rainbow</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;Run the trap&#x27;</span>.trap); <span class="comment">// Drops the bass</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure></li><li>保存之后在原来的命令行中输入<code>node app.js</code><br>可以看到效果：<br><img src="/img/img_1.png" alt="img_1.png"></li></ul><h3 id="2-2-npm身份证"><a href="#2-2-npm身份证" class="headerlink" title="2.2 npm身份证"></a>2.2 npm身份证</h3><p>我们从npm中下载的modules文件夹被称为‘依赖’，我们可以使用package.json去管理这些的‘依赖’。需要创建一个身份证，通常创建项目第一件事就是新建身份证。</p><ul><li>新建一个项目文件夹</li><li>在命令行进入到响应的文件夹，输入命令<code>npm init</code></li><li>接着输入表单信息，包括包名，描述，版本号，作者等信息，可以按需回答，也可以回车跳过<br><img src="/img/img_2.png" alt="img_2.png"></li><li>填好后原来的文件夹之中会出现一个package.json文件，里面包含了身份证的信息</li><li>再次以模块colors为例，在命令行输入命令<code>npm install --save colors</code>,package.json文件中就会出现模块的依赖项<br><img src="/img/img_3.png" alt="img_3.png"></li></ul><p>这样做的原因：node_modules中的模块之间都是相互影响的，如果引入的模块特别多，进行文件传输时，可能会造成非常的大的影响。而只传身份证，<br>在下一次安装模块使用时，只要在项目文件夹下输入命令<code>npm install</code>，npm就会检索存放在package.json里面的信息，安装所有依赖。</p><h2 id="3-内置Node-js模块使用"><a href="#3-内置Node-js模块使用" class="headerlink" title="3.内置Node.js模块使用"></a>3.内置Node.js模块使用</h2><p>为了让Node.js的文件可以相互调用，Node.js提供了一个简单的模块系统。</p><p>模块是Node.js 应用程序的基本组成部分，文件和模块是一一对应的。换言之，一个 Node.js 文件就是一个模块，这个文件可能是JavaScript 代码、JSON 或者编译过的C/C++ 扩展。<br>除了可以使用npm来使用第三方模块之外，Node.js还提供了许多内置模块，见<a href="https://nodejs.org/docs/latest-v15.x/api/">https://nodejs.org/docs/latest-v15.x/api/</a><br>已文件系统模块fs为例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入http模块</span></span><br><span class="line"><span class="keyword">var</span> http= <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"><span class="comment">//引入fs模块</span></span><br><span class="line"><span class="keyword">var</span> fs =<span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="comment">//用node.js创建服务器</span></span><br><span class="line"><span class="keyword">var</span> server=http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(req.url);</span><br><span class="line">    <span class="comment">//更改http报文的头部，设置编码为utf8</span></span><br><span class="line">    res.setHeader(<span class="string">&quot;Content-Type&quot;</span>,<span class="string">&quot;text/html;charset=UTF8&quot;</span>)</span><br><span class="line">    <span class="comment">//自定义路由</span></span><br><span class="line">    <span class="keyword">if</span>(req.url===<span class="string">&quot;/xiao&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//用fs来读取模块</span></span><br><span class="line">        fs.readFile(<span class="string">&quot;./public/wen.txt&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">            res.end(data)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        res.end(<span class="string">&quot;页面不存在&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//监听端口</span></span><br><span class="line">server.listen(<span class="number">6531</span>)</span><br></pre></td></tr></table></figure><p>通过这种方式，可以建立一个服务器，设计路由，从而方便网页的访问</p>]]></content>
      
      
      <categories>
          
          <category> 知识笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue组件简析</title>
      <link href="/2021/07/26/Vue%E7%BB%84%E4%BB%B6%E7%AE%80%E6%9E%90/"/>
      <url>/2021/07/26/Vue%E7%BB%84%E4%BB%B6%E7%AE%80%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue组件简析"><a href="#Vue组件简析" class="headerlink" title="Vue组件简析"></a>Vue组件简析</h1><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><p>组件（Component）是 Vue.js 最强大的功能之一。</p><p>组件可以扩展 HTML 元素，封装可重用的代码。</p><p>组件系统让我们可以用独立可复用的小组件来构建大型应用，几乎任意类型的应用的界面都可以抽象为一个组件树：</p><p><img src="https://www.runoob.com/wp-content/uploads/2017/01/components.png" alt="img"></p><p><strong>组件是可复用的 Vue 实例，它们与 <code>new Vue</code> 接收相同的选项</strong>，例如 <code>data</code>、<code>computed</code>、<code>watch</code>、<code>methods</code> 以及生命周期钩子等。仅有的例外是像 <code>el</code> 这样根实例特有的选项。</p><p>通常一个应用会以一棵嵌套的组件树的形式来组织，例如，你可能会有页头、侧边栏、内容区等组件，每个组件又包含了其它的像导航链接、博文之类的组件。</p><p>为了能在模板中使用，这些组件必须先注册以便 Vue 能够识别。这里有两种组件的注册类型：<strong>全局注册</strong>和<strong>局部注册</strong>。接下来介绍一下这两种注册方式。</p><hr><h2 id="2-全局注册"><a href="#2-全局注册" class="headerlink" title="2.全局注册"></a>2.全局注册</h2><p>全局注册分为三部分：</p><h4 id="2-1-构建模板对象"><a href="#2-1-构建模板对象" class="headerlink" title="2.1.构建模板对象"></a>2.1.构建模板对象</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--html代码用反引号括起来--&gt;</span><br><span class="line"><span class="keyword">const</span> htmlElement=Vue.extend(&#123;</span><br><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="attr">count</span> : <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">&lt;button v-on:click=&quot;count++&quot;&gt;</span></span><br><span class="line"><span class="string">          &lt;h3&gt;注册全局组件&lt;/h3&gt; </span></span><br><span class="line"><span class="string">          点击量：&#123;&#123;count&#125;&#125;</span></span><br><span class="line"><span class="string">&lt;/button&gt;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>上面的Vue.extend()是一个基础构造器(全局 API)，意图创建一个子类；</p><p><strong>一个组件的 <code>data</code> 选项必须是一个函数</strong>，它返回的是一个对象，内含数据键值对，因此每个实例可以维护一份被返回对象的独立的拷贝，而<strong>不是</strong>像这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-注册全局组件"><a href="#2-2-注册全局组件" class="headerlink" title="2.2.注册全局组件"></a>2.2.注册全局组件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;lhy&#x27;</span>,htmlElement);</span><br></pre></td></tr></table></figure><p>上面的Vue.component()是注册组件，参数 1 为组件名称，参数 2 为.extend()；详情看<a href="https://cn.vuejs.org/v2/api/#Vue-component">官方文档API部分</a></p><h4 id="3-视图输出"><a href="#3-视图输出" class="headerlink" title="3.视图输出"></a>3.视图输出</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">lhy</span>&gt;</span></span></span><br><span class="line"><span class="xml">        </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">lhy</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>这样一个全局组件就注册好了。</p><p>除了这一种方式之外我们也可以省略掉 Vue.extend()这一步，将构造内容直接作为参数传递</p><p>像这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">lhy</span>&gt;</span><span class="tag">&lt;/<span class="name">lhy</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Vue.component(<span class="string">&#x27;lhy&#x27;</span>, &#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="attr">count</span> : <span class="number">0</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">template</span> :</span><br><span class="line"></span><br><span class="line">    <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;button v-on:click=&quot;count++&quot;&gt;</span></span><br><span class="line"><span class="string">    点击量：&#123;&#123;count&#125;&#125;</span></span><br><span class="line"><span class="string">&lt;/button&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="3-局部注册"><a href="#3-局部注册" class="headerlink" title="3.局部注册"></a>3.局部注册</h2><p>刚刚的方式，是组件的全局注册方式，意味其它 Vue 实例也可以访问</p><p>如果想要只限某个 Vue 实例，可以设置局部注册方法</p><h4 id="3-1-创建一个组件"><a href="#3-1-创建一个组件" class="headerlink" title="3.1.创建一个组件"></a>3.1.创建一个组件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> htmlElement=&#123;</span><br><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span>&#123;</span><br><span class="line"><span class="attr">count</span>:<span class="number">0</span>,</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">&lt;button @click=&quot;count++&quot;&gt;点击次数&#123;&#123;count&#125;&#125;&lt;/button&gt;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-绑定组件注册"><a href="#3-2-绑定组件注册" class="headerlink" title="3.2.绑定组件注册"></a>3.2.绑定组件注册</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app=<span class="keyword">new</span> Vue(&#123;</span><br><span class="line"><span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line"><span class="attr">components</span>:&#123;</span><br><span class="line"><span class="string">&#x27;lhy&#x27;</span>:htmlElement</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在局部注册中，不用extend()方法，因为extend是<strong>全局API</strong></p><hr><h2 id="4-组件的嵌套"><a href="#4-组件的嵌套" class="headerlink" title="4.组件的嵌套"></a>4.组件的嵌套</h2><p>组件和组件之间可以嵌套，形成一种父子关系的组件</p><p>例如，我们先注册两个父组件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--第一个父组件--&gt;</span><br><span class="line">Vue.component(<span class="string">&#x27;f1&#x27;</span>,&#123;</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>  &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">message</span>: <span class="string">&#x27;一号父组件&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">template</span>:<span class="string">`&lt;div&gt;</span></span><br><span class="line"><span class="string">                  &#123;&#123;message&#125;&#125;</span></span><br><span class="line"><span class="string">              &lt;/div&gt;`</span></span><br><span class="line">                   ,</span><br><span class="line">  &#125;);</span><br><span class="line">&lt;!--第二个父组件--&gt;</span><br><span class="line">Vue.component(<span class="string">&#x27;f2&#x27;</span>,&#123;</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>  &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">message</span>: <span class="string">&#x27;二号父组件&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">template</span>:<span class="string">`&lt;div&gt;</span></span><br><span class="line"><span class="string">                  &#123;&#123;message&#125;&#125;</span></span><br><span class="line"><span class="string">              &lt;/div&gt;`</span></span><br><span class="line">                   ,</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>Vue.Compnents 第二个参数其实就是 Vue 构造子集，可以继续嵌套。</p><p>我们可以在原来的基础上，对第一个父组件进行嵌套</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--在外面定义一个子组件--&gt;</span><br><span class="line"><span class="keyword">const</span> deson=&#123;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>&#123;</span><br><span class="line">          <span class="attr">message</span>:<span class="string">&#x27;在外面定义的子组件&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">template</span>:<span class="string">`&lt;div&gt;</span></span><br><span class="line"><span class="string">&#123;&#123;message&#125;&#125;</span></span><br><span class="line"><span class="string">          &lt;/div&gt;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">Vue.component(<span class="string">&#x27;f1&#x27;</span>,&#123;</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>  &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">message</span>: <span class="string">&#x27;一号父组件&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">template</span>:<span class="string">`&lt;div&gt;</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">&#123;&#123;message&#125;&#125;</span></span><br><span class="line"><span class="string">                &lt;/div&gt;</span></span><br><span class="line"><span class="string">                &lt;son1&gt;&lt;/son1&gt;</span></span><br><span class="line"><span class="string">            &lt;son2&gt;&lt;/son2&gt;</span></span><br><span class="line"><span class="string">               &lt;/div&gt;`</span>,</span><br><span class="line">    <span class="attr">components</span>: &#123;</span><br><span class="line">&lt;!--在里面定义一个子组件--&gt;</span><br><span class="line">      <span class="string">&#x27;son1&#x27;</span>:&#123;</span><br><span class="line">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          <span class="keyword">return</span>&#123;</span><br><span class="line">            <span class="attr">message</span>:<span class="string">&#x27;在里面定义的子组件&#x27;</span></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">        <span class="attr">template</span>:<span class="string">`&lt;div&gt;&#123;&#123;message&#125;&#125;&lt;/div&gt;`</span></span><br><span class="line">      &#125;,</span><br><span class="line">&lt;!--绑定在外面定义的子组件--&gt;</span><br><span class="line">      <span class="string">&#x27;son2&#x27;</span>:deson,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  Vue.component(<span class="string">&#x27;asshole&#x27;</span>,&#123;</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>  &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">message</span>: <span class="string">&#x27;二号父组件&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">template</span>:<span class="string">`&lt;div&gt;&#123;&#123;message&#125;&#125;&lt;/div&gt;`</span>,</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>而html为</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">f1</span>&gt;</span><span class="tag">&lt;/<span class="name">f1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">f2</span>&gt;</span><span class="tag">&lt;/<span class="name">f2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最终的效果如图：</p><p><img src="./img/vue.png" alt="image-20210726173939968"></p><p>其中在外面创建的子组件，是一个独立的子组件，可以用于直接传入其它父组件</p><hr><h2 id="5-props"><a href="#5-props" class="headerlink" title="5.props"></a>5.props</h2><h4 id="5-1-props通信"><a href="#5-1-props通信" class="headerlink" title="5.1.props通信"></a>5.1.props通信</h4><p>组件的父子关系中，当设置一个独立组件时，这个组件就是 new Vue()的子组件</p><p>当我们需要通过子组件显示父组件 data 值的时候，需要通过 props 属性传值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个组件是 Vue 实例的子组件</span></span><br><span class="line"><span class="keyword">const</span> childComponent = &#123;</span><br><span class="line"><span class="attr">template</span> : <span class="string">`</span></span><br><span class="line"><span class="string">&lt;div&gt;&#123;&#123;text&#125;&#125;&lt;/div&gt;</span></span><br><span class="line"><span class="string">`</span>,</span><br><span class="line"><span class="attr">props</span> : [<span class="string">&#x27;text&#x27;</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根组件</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line"><span class="attr">el</span> : <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line"><span class="attr">data</span> : &#123;<span class="attr">message</span>:<span class="string">&#x27;Hello&#x27;</span>&#125;,</span><br><span class="line"><span class="attr">components</span> : &#123;</span><br><span class="line"><span class="string">&#x27;html-a&#x27;</span> : childComponent</span><br><span class="line">&#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在这里父组件中data里面message的值会通过v-bind传入到子组件的html中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    //使用 v-bind 才能将父组件的 data 值绑定到子组件使用；</span><br><span class="line">    <span class="tag">&lt;<span class="name">html-a</span> <span class="attr">v-bind:text</span>=<span class="string">&quot;message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">html-a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5-2-props类型"><a href="#5-2-props类型" class="headerlink" title="5.2.props类型"></a>5.2.props类型</h4><p>从父组件给子组件通信，子组件不单单可以得到字符串类型，还可以是其它类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数据对象</span></span><br><span class="line"><span class="keyword">const</span> dataObj = &#123;</span><br><span class="line">    <span class="attr">message</span> : <span class="string">&#x27;Hello, Vue!&#x27;</span>,</span><br><span class="line">    <span class="attr">array</span> : [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],</span><br><span class="line">    <span class="attr">object</span> : &#123;</span><br><span class="line">        <span class="attr">name</span> : <span class="string">&#x27;Mr.Lee&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span> : <span class="number">100</span></span><br><span class="line">&#125;,</span><br><span class="line">    <span class="attr">flag</span> : <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">number</span> : <span class="number">200</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html-a</span> <span class="attr">v-bind:text</span>=<span class="string">&quot;message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">html-a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html-a</span> <span class="attr">v-bind:text</span>=<span class="string">&quot;flag&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">html-a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html-a</span> <span class="attr">v-bind:text</span>=<span class="string">&quot;number&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">html-a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html-a</span> <span class="attr">v-bind:text</span>=<span class="string">&quot;array[4]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">html-a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html-a</span> <span class="attr">v-bind:text</span>=<span class="string">&quot;number&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">html-a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html-a</span> <span class="attr">v-bind:text</span>=<span class="string">&quot;array&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">html-a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html-a</span> <span class="attr">v-bind:text</span>=<span class="string">&quot;object&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">html-a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html-a</span> <span class="attr">v-bind:text</span>=<span class="string">&quot;object.name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">html-a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html-a</span> <span class="attr">v-bind:text</span>=<span class="string">&quot;message + &#x27; + &#x27; + number&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">html-a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html-a</span> <span class="attr">v-bind:text</span>=<span class="string">&quot;flag&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;flag&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">html-a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面的子类中，text 包含了所有的父组件的值</p><p>而这种方式只能在绑定里组合更多的值，而不能在模版中组合更多的值</p><h4 id="5-3-组件的单向数据流"><a href="#5-3-组件的单向数据流" class="headerlink" title="5.3.组件的单向数据流"></a>5.3.<strong>组件的单向数据流</strong></h4><p>父组件的 data 值更新后通过 props 选项交给子组件进行渲染，反之则不行；</p><p> 这就是单向数据流(单向下行绑定)，不能通过子组件来改变父组件的状态；</p><p>这样做的是为了防止父组件发生改变后，数据流变得难以理解；</p><p>父组件更新时，子组件所有 props 值也会更新，你不能改变子组件的 props 值；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父组件</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line"><span class="attr">el</span> : <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span> : &#123;</span><br><span class="line">        <span class="attr">count</span> : <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">components</span> : &#123;</span><br><span class="line">        <span class="string">&#x27;html-a&#x27;</span> : &#123;</span><br><span class="line">            <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;</span><br><span class="line">                    <span class="attr">message</span> : <span class="string">&#x27;子组件&#x27;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">template</span> : <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;button v-on:click=&quot;count++&quot;&gt;&#123;&#123;count&#125;&#125;&lt;/button&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">    <span class="attr">props</span> : [<span class="string">&#x27;count&#x27;</span>],</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>以上的代码从子组件改变从父组件传下来的值，这样会正确改变了 props 的值，也渲染到视图中，但控制台报错。</p><p>因为我们不可以直接修改 props 值，可以通过数据或计算属性来解决</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//其中的count是父组件中data里面的值，将count传给子组件里面的childCount</span></span><br><span class="line"><span class="attr">components</span> : &#123;</span><br><span class="line"><span class="string">&#x27;html-a&#x27;</span> : &#123;</span><br><span class="line">            <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;</span><br><span class="line">                    <span class="attr">message</span> : <span class="string">&#x27;子组件&#x27;</span>,</span><br><span class="line">                    <span class="attr">childCount</span> : <span class="built_in">this</span>.count</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">template</span> : <span class="string">`</span></span><br><span class="line"><span class="string">                &lt;button v-on:click=&quot;childCount++&quot;&gt;&#123;&#123;childCount&#125;&#125;&lt;/button&gt;</span></span><br><span class="line"><span class="string">                `</span>,</span><br><span class="line">            <span class="attr">props</span> : [<span class="string">&#x27;count&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过使用计算属性和方法数据更改</span></span><br><span class="line"><span class="attr">components</span> : &#123;</span><br><span class="line">    <span class="string">&#x27;html-a&#x27;</span> : &#123;</span><br><span class="line">            <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;</span><br><span class="line">                    <span class="attr">message</span> : <span class="string">&#x27;子组件&#x27;</span>,</span><br><span class="line">                    <span class="attr">childCount</span> : <span class="built_in">this</span>.count</span><br><span class="line">                &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">template</span> : <span class="string">`</span></span><br><span class="line"><span class="string">                &lt;button</span></span><br><span class="line"><span class="string">                v-on:click=&quot;clickChildCount&quot;&gt;&#123;&#123;changeChildCount&#125;&#125;&lt;/button&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">            <span class="attr">props</span> : [<span class="string">&#x27;count&#x27;</span>],</span><br><span class="line">    <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="function"><span class="title">changeChildCount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.childCount;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span> : &#123;</span><br><span class="line">    <span class="function"><span class="title">clickChildCount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.childCount++;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考资料：</p><blockquote><p><a href="https://cn.vuejs.org/">Vue官方文档</a><br><a href="https://www.runoob.com/vue2/vue-tutorial.html">菜鸟教程vue.js</a><br><a href="https://www.bilibili.com/video/BV1Qp4y1Q7nx?p=6">李炎恢教程</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 知识笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/07/21/hello-world/"/>
      <url>/2021/07/21/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
