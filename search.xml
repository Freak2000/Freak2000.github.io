<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>git和npm设置Socks5代理</title>
      <link href="/2022/01/12/git%E5%92%8Cnpm%E8%AE%BE%E7%BD%AESocks5%E4%BB%A3%E7%90%86/"/>
      <url>/2022/01/12/git%E5%92%8Cnpm%E8%AE%BE%E7%BD%AESocks5%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写在前面：本文介绍主要是为了学习科研以及开发工作。请遵守中华人民共和国法律法规，切勿在任何地方发布分裂国家，激化民族矛盾的言论。本博客不欢迎不爱国及极端人士。</p></blockquote><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>​    <a href="https://zh.wikipedia.org/wiki/Shadowsocks#ShadowsocksR">Shadowsocks(R)</a>是我们常用的一款科学上网工具，它是一种基于<a href="https://zh.wikipedia.org/wiki/SOCKS#SOCK5">Socks5</a>代理方式的加密传输协议，也可以指实现这个协议的各种开发包。当我们开启Shadowsocks(R)进行科学上网之后，虽然可以对国外的网页进行流畅的访问，但是在命令行中使用git或者npm时，速度却并没有提升，这是因为它们并没有走Socks5的代理路线。要让git和npm走代理的路线，可以通过命令进行设置。</p><p>Shadowsocks(R)默认在<code>1080</code>端口开启了<code>Socks5代理</code>，但是它为了兼容<code>HTTP代理</code>模式，在<code>8123</code>端口使用<code>ss_privoxy.exe</code>开启了一个<code>HTTP代理</code>。不仅如此，Shadowsocks(R)在1080端口也支持http代理。</p><h2 id="npm设置代理"><a href="#npm设置代理" class="headerlink" title="npm设置代理"></a>npm设置代理</h2><p>一般来说，Shadowsocks-windows 会分别提供一个 http 代理和一个 socks5 代理，默认都是 1080 的端口。我们可以把npm的代理设置成http或者sock5这两种协议的代理,一般来说，只需要设置<code>Socks5</code>代理</p><h3 id="设置http代理"><a href="#设置http代理" class="headerlink" title="设置http代理"></a>设置http代理</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 假设本地代理端口为1080</span><br>npm config set proxy http://127.0.0.1:1080<br>npm config set https-proxy http://127.0.0.1:1080<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 有用户密码的代理</span><br>npm config set proxy http://username:password@127.0.0.1:1080<br>npm confit set https-proxy http://username:password@127.0.0.1:1080<br></code></pre></td></tr></table></figure><h3 id="设置Socks5代理"><a href="#设置Socks5代理" class="headerlink" title="设置Socks5代理"></a>设置Socks5代理</h3><p>npm 不支持 socks 代理，但是我们可以用一个工具将 http 代理转成 socks 代理，然后将 npm 代理地址设置到这个工具的地址。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 假设本地socks5代理端口为8081,默认的话一般是1080</span><br><span class="hljs-meta">#</span><span class="bash"> 首先安装转换工具</span><br>npm install -g http-proxy-to-socks<br><span class="hljs-meta">#</span><span class="bash"> 然后使用这个工具监听1080端口,支持http代理，然后所有1080的http代理数据都将转换成socks的代理数据发送到8081上</span><br>hpts -s localhost:8081 -p 1080<br><span class="hljs-meta">#</span><span class="bash"> 最后设置npm代理为1080</span><br>npm config set proxy &quot;http://localhost:1080&quot;<br>npm config set https-proxy &quot;http://localhost:1080&quot;<br></code></pre></td></tr></table></figure><p>相当于又加了一个中间层，将 http 转成 Socks。</p><h3 id="查看代理"><a href="#查看代理" class="headerlink" title="查看代理"></a>查看代理</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm config get<br><span class="hljs-meta">#</span><span class="bash"> or</span><br>npm config list<br></code></pre></td></tr></table></figure><h3 id="清除代理"><a href="#清除代理" class="headerlink" title="清除代理"></a>清除代理</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm config delete proxy<br><span class="hljs-meta">#</span><span class="bash"> and</span><br>npm config delete https-proxy<br></code></pre></td></tr></table></figure><h2 id="git设置代理"><a href="#git设置代理" class="headerlink" title="git设置代理"></a>git设置代理</h2><p>同npm一样，我们可以设置Socks5和http两种协议的代理，但是一般只要管Socks5一种就可以了</p><h3 id="设置http代理-1"><a href="#设置http代理-1" class="headerlink" title="设置http代理"></a>设置http代理</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 假设端口为1080</span><br>git config --global https.proxy http://127.0.0.1:1080<br>git config --global https.proxy https://127.0.0.1:1080<br></code></pre></td></tr></table></figure><h3 id="设置sock5代理"><a href="#设置sock5代理" class="headerlink" title="设置sock5代理"></a>设置sock5代理</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 假设端口为1080</span><br>git config --global http.proxy socks5://127.0.0.1:1080<br>git config --global https.proxy socks5://127.0.0.1:1080<br></code></pre></td></tr></table></figure><h3 id="取消代理"><a href="#取消代理" class="headerlink" title="取消代理"></a>取消代理</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git config --global --unset http.proxy<br>git config --global --unset https.proxy<br></code></pre></td></tr></table></figure><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>除了npm和git，像<code>yarn</code>,<code>gradle</code>这样的软件也可以设置代理，从而加快访问的速度</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><p><a href="https://vimcaw.github.io/blog/2017/08/13/ShadowsocksR%E4%BB%A3%E7%90%86%E6%96%B9%E5%BC%8F/">Shadowsocks代理方式</a></p><p><a href="https://www.lihuacats.com/archives/npm%E8%AE%BE%E7%BD%AEsocks5%E4%BB%A3%E7%90%86">npm设置socks5代理</a></p><p><a href="https://www.jianshu.com/p/739f139cf13c">Git设置代理</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用js写排序算法</title>
      <link href="/2022/01/11/%E7%94%A8js%E5%86%99%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
      <url>/2022/01/11/%E7%94%A8js%E5%86%99%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>学习排序算法是大一下学期上数据结构课的时候的事了，当时学习用的是<code>c++</code>，如今<code>javascript</code>已经成了我的主语言。为了准备面试和巩固基础，我决定用js写一遍10大排序算法并且上传到博客，算是复习一遍基础的算法吧。</p><h2 id="冒泡排序（Bubble-Sort）"><a href="#冒泡排序（Bubble-Sort）" class="headerlink" title="冒泡排序（Bubble Sort）"></a>冒泡排序（Bubble Sort）</h2><h3 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h3><blockquote><p>使用冒泡排序为一列数字进行排序的动态效果图</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/lhy-innno/Image-hosting-service/img/202201041630063.gif"></p><p><strong>冒泡排序</strong>（英语：<strong>Bubble Sort</strong>）又称为<strong>泡式排序</strong>，是一种简单的<a href="https://zh.wikipedia.org/wiki/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95">排序算法</a>。它重复地走访过要排序的<a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E5%88%97">数列</a>，一次比较两个元素，如果它们的顺序错误就把它们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。</p><h3 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> bubble_sort = <span class="hljs-function">(<span class="hljs-params">array</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">let</span> length = array.length<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i&lt;length-<span class="hljs-number">1</span>; i++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j&lt;length-<span class="hljs-number">1</span>-i; j++) &#123;<br>      <span class="hljs-keyword">if</span> (array[j]&gt;array[j+<span class="hljs-number">1</span>]) &#123;<br>        <span class="hljs-comment">// 这里用了es6的解构赋值， 不用创建一个临时的变量来存放值</span><br>        [array[j], array[j+<span class="hljs-number">1</span>]] = [array[j+<span class="hljs-number">1</span>], array[j]]<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-built_in">console</span>.log(array)<br>  <span class="hljs-keyword">return</span> array<br>&#125;<br><br><span class="hljs-keyword">let</span> num = [<span class="hljs-number">22</span>, <span class="hljs-number">34</span>, <span class="hljs-number">3</span>, <span class="hljs-number">32</span>, <span class="hljs-number">82</span>, <span class="hljs-number">55</span>, <span class="hljs-number">89</span>, <span class="hljs-number">50</span>, <span class="hljs-number">37</span>, <span class="hljs-number">5</span>, <span class="hljs-number">64</span>, <span class="hljs-number">35</span>, <span class="hljs-number">9</span>, <span class="hljs-number">70</span>];<br>bubble_sort(num)<br></code></pre></td></tr></table></figure><blockquote><p>一个冒泡排序的例子动画</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/lhy-innno/Image-hosting-service/img/202201041630064.gif"></p><table><thead><tr><th>名字</th><th>最好时间复杂度</th><th>最坏时间复杂度</th><th>平均时间复杂度</th><th>空间复杂度</th><th>是否稳定</th></tr></thead><tbody><tr><td>冒泡排序</td><td>n</td><td>n²</td><td>n²</td><td>1</td><td>是</td></tr></tbody></table><p>[^是否稳定]: 稳定：如果a原本在b前面，而a=b，排序之后a仍然在b的前面； <strong>不稳定</strong>：如果a原本在b的前面，而a=b，排序之后a可能会出现在b的后面</p><h2 id="选择排序（Selection-Sort）"><a href="#选择排序（Selection-Sort）" class="headerlink" title="选择排序（Selection Sort）"></a>选择排序（Selection Sort）</h2><h3 id="算法描述-1"><a href="#算法描述-1" class="headerlink" title="算法描述"></a>算法描述</h3><blockquote><p>动态效果图</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/lhy-innno/Image-hosting-service/img/202201041632116.gif"></p><p><strong>选择排序</strong>（Selection sort）是一种简单直观的<a href="https://zh.wikipedia.org/wiki/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95">排序算法</a>。它的工作原理如下。首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。</p><p>选择排序的主要优点与数据移动有关。如果某个元素位于正确的最终位置上，则它不会被移动。选择排序每次交换一对元素，它们当中至少有一个将被移到其最终位置上，因此对n个元素的表进行排序总共进行至多n-1次交换。在所有的完全依靠交换去移动元素的排序方法中，选择排序属于非常好的一种。</p><h3 id="算法实现-1"><a href="#算法实现-1" class="headerlink" title="算法实现"></a>算法实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> selection_sort = <span class="hljs-function">(<span class="hljs-params">array</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">let</span> length = array.length<br>  <span class="hljs-comment">// 定义一个值来记录每一次循环得到的最小值的下标</span><br>  <span class="hljs-keyword">let</span> minIndex<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i&lt;length-<span class="hljs-number">1</span>; i++) &#123;<br>    minIndex = i<br>    <span class="hljs-comment">// 通过本次循环得到从i+1开始的数组的最小值</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> j = i+<span class="hljs-number">1</span>; j&lt;length; j++) &#123;<br>      <span class="hljs-keyword">if</span> (array[j]&lt;array[minIndex]) &#123;<br>        minIndex = j<br>      &#125;<br>    &#125;<br>    <span class="hljs-comment">// 将最小值换到数组前面</span><br>    [array[i], array[minIndex]] = [array[minIndex], array[i]]<br>  &#125;<br>  <span class="hljs-built_in">console</span>.log(array)<br>  <span class="hljs-keyword">return</span> array<br>&#125;<br><br>selection_sort([<span class="hljs-number">22</span>, <span class="hljs-number">34</span>, <span class="hljs-number">3</span>, <span class="hljs-number">32</span>, <span class="hljs-number">82</span>, <span class="hljs-number">55</span>, <span class="hljs-number">89</span>, <span class="hljs-number">50</span>, <span class="hljs-number">37</span>, <span class="hljs-number">5</span>, <span class="hljs-number">64</span>, <span class="hljs-number">35</span>, <span class="hljs-number">9</span>, <span class="hljs-number">70</span>])<br><br></code></pre></td></tr></table></figure><table><thead><tr><th>名字</th><th>最好时间复杂度</th><th>最坏时间复杂度</th><th>平均时间复杂度</th><th>空间复杂度</th><th>是否稳定</th></tr></thead><tbody><tr><td>选择排序</td><td>n²</td><td>n²</td><td>n²</td><td>1</td><td>否</td></tr></tbody></table><h2 id="插入排序（Insertion-Sort）"><a href="#插入排序（Insertion-Sort）" class="headerlink" title="插入排序（Insertion Sort）"></a>插入排序（Insertion Sort）</h2><h3 id="算法描述-2"><a href="#算法描述-2" class="headerlink" title="算法描述"></a>算法描述</h3><blockquote><p>动态效果</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/lhy-innno/Image-hosting-service/img/202201041631502.gif"></p><p><strong>插入排序</strong>（英语：Insertion Sort）是一种简单直观的<a href="https://zh.wikipedia.org/wiki/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95">排序算法</a>。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。<strong>插入排序</strong>在实现上，通常采用in-place排序（即只需用到O(1)的额外空间的排序)，因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。</p><h3 id="算法实现-2"><a href="#算法实现-2" class="headerlink" title="算法实现"></a>算法实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> insertion_sort = <span class="hljs-function">(<span class="hljs-params">array</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">let</span> length = array.length<br>  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">1</span>; i&lt;length; i++) &#123;<br>    <span class="hljs-built_in">console</span>.log(array[i])<br>    <span class="hljs-keyword">let</span> key = array[i]<br>    <span class="hljs-keyword">let</span> j = i-<span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> (j&gt;=<span class="hljs-number">0</span> &amp;&amp; array[j]&gt;key) &#123;<br>      array[j+<span class="hljs-number">1</span>] = array[j]<br>      j--<br>    &#125;<br>    array[j+<span class="hljs-number">1</span>] = key<br>  &#125;<br>  <span class="hljs-built_in">console</span>.log(array)<br>  <span class="hljs-keyword">return</span> array<br>&#125;<br><br>insertion_sort([<span class="hljs-number">22</span>, <span class="hljs-number">34</span>, <span class="hljs-number">3</span>, <span class="hljs-number">32</span>, <span class="hljs-number">82</span>, <span class="hljs-number">55</span>, <span class="hljs-number">89</span>, <span class="hljs-number">50</span>, <span class="hljs-number">37</span>, <span class="hljs-number">5</span>, <span class="hljs-number">64</span>, <span class="hljs-number">35</span>, <span class="hljs-number">9</span>, <span class="hljs-number">70</span>])<br><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lhy-innno/Image-hosting-service/img/202201041631504.gif"></p><table><thead><tr><th>名字</th><th>最好时间复杂度</th><th>最坏时间复杂度</th><th>平均时间复杂度</th><th>空间复杂度</th><th>是否稳定</th></tr></thead><tbody><tr><td>插入排序</td><td>n</td><td>n²</td><td>n²</td><td>1</td><td>是</td></tr></tbody></table><h2 id="希尔排序（Shell-Sort）"><a href="#希尔排序（Shell-Sort）" class="headerlink" title="希尔排序（Shell Sort）"></a>希尔排序（Shell Sort）</h2><h3 id="算法介绍"><a href="#算法介绍" class="headerlink" title="算法介绍"></a>算法介绍</h3><p><strong>希尔排序</strong>（Shellsort），也称<strong>递减增量排序算法</strong>，是<a href="https://zh.wikipedia.org/wiki/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F">插入排序</a>的一种更高效的改进版本。希尔排序是非稳定排序算法。</p><p>希尔排序是基于插入排序的以下两点性质而提出改进方法的：</p><ul><li>插入排序在对几乎已经排好序的数据操作时，效率高，即可以达到<a href="https://zh.wikipedia.org/w/index.php?title=%E7%B7%9A%E6%80%A7%E6%8E%92%E5%BA%8F&action=edit&redlink=1">线性排序</a>的效率</li><li>但插入排序一般来说是低效的，因为插入排序每次只能将数据移动一位</li></ul><h3 id="算法描述-3"><a href="#算法描述-3" class="headerlink" title="算法描述"></a>算法描述</h3><ul><li><p>选择一个增量序列t1，t2，…，tk，其中ti&gt;tj，tk=1</p></li><li><p>按增量序列个数k，对序列进行k 趟排序</p></li><li><p>每趟排序，根据对应的增量ti，将待排序列分割成若干长度为m 的子序列，分别对各子表进行直接插入排序。仅增量因子为1 时，整个序列作为一个表来处理，表长度即为整个序列的长度</p></li></ul><h3 id="算法实现-3"><a href="#算法实现-3" class="headerlink" title="算法实现"></a>算法实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> shell_sort = <span class="hljs-function">(<span class="hljs-params">array</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> gap = array.length&gt;&gt;<span class="hljs-number">1</span>; gap&gt;<span class="hljs-number">0</span>; gap&gt;&gt;=<span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = gap; i&lt;array.length; i++) &#123;<br>      <span class="hljs-keyword">let</span> temp = array[i],j<br>      <span class="hljs-keyword">for</span>(j = i-gap; j&gt;=<span class="hljs-number">0</span> &amp;&amp; array[j]&gt;temp; j-=gap) &#123;<br>        array[j+gap] = array[j]<br>      &#125;<br>      array[j+gap] = temp<br>    &#125;<br>  &#125;<br>  <span class="hljs-built_in">console</span>.log(array)<br>  <span class="hljs-keyword">return</span> array<br>&#125;<br>shell_sort([<span class="hljs-number">22</span>, <span class="hljs-number">34</span>, <span class="hljs-number">3</span>, <span class="hljs-number">32</span>, <span class="hljs-number">82</span>, <span class="hljs-number">55</span>, <span class="hljs-number">89</span>, <span class="hljs-number">50</span>, <span class="hljs-number">37</span>, <span class="hljs-number">5</span>, <span class="hljs-number">64</span>, <span class="hljs-number">35</span>, <span class="hljs-number">9</span>, <span class="hljs-number">70</span>])<br><br></code></pre></td></tr></table></figure><table><thead><tr><th>名字</th><th>最好时间复杂度</th><th>最坏时间复杂度</th><th>平均时间复杂度</th><th>空间复杂度</th><th>是否稳定</th></tr></thead><tbody><tr><td>希尔排序</td><td>nlog(n)</td><td>n (log(n))2</td><td>无法确定</td><td>1</td><td>否</td></tr></tbody></table><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><h3 id="算法介绍-1"><a href="#算法介绍-1" class="headerlink" title="算法介绍"></a>算法介绍</h3><blockquote><p>动态效果</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/lhy-innno/Image-hosting-service/img/202201041631505.gif"></p><p><strong>归并排序</strong>（英语：Merge sort，或mergesort），是创建在归并操作上的一种有效的<a href="https://zh.wikipedia.org/wiki/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95">排序算法</a>，<a href="https://zh.wikipedia.org/wiki/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6">效率</a>为{\displaystyle O(n\log n)（<a href="https://zh.wikipedia.org/wiki/%E5%A4%A7O%E7%AC%A6%E5%8F%B7">大O符号</a>）。1945年由<a href="https://zh.wikipedia.org/wiki/%E7%BA%A6%E7%BF%B0%C2%B7%E5%86%AF%C2%B7%E8%AF%BA%E4%BC%8A%E6%9B%BC">约翰·冯·诺伊曼</a>首次提出。该算法是采用<a href="https://zh.wikipedia.org/wiki/%E5%88%86%E6%B2%BB%E6%B3%95">分治法</a>（Divide and Conquer)的一个非常典型的应用，且各层分治递归可以同时进行。</p><h3 id="算法描述-4"><a href="#算法描述-4" class="headerlink" title="算法描述"></a>算法描述</h3><ul><li><p>把长度为n的输入序列分成两个长度为n/2的子序列</p></li><li><p>对这两个子序列分别采用归并排序</p></li><li><p>将两个排序好的子序列合并成一个最终的排序序列</p></li></ul><h3 id="算法实现-4"><a href="#算法实现-4" class="headerlink" title="算法实现"></a>算法实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> merge_sort = <span class="hljs-function">(<span class="hljs-params">array</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (array.length&lt;<span class="hljs-number">2</span>) &#123;<br>    <span class="hljs-keyword">return</span> array<br>  &#125;<br>  <span class="hljs-comment">// 向下取整</span><br>  <span class="hljs-keyword">let</span> middle = <span class="hljs-built_in">Math</span>.floor(array.length/<span class="hljs-number">2</span>)<br>  <span class="hljs-keyword">let</span> left = array.slice(<span class="hljs-number">0</span>, middle)<br>  <span class="hljs-keyword">let</span> right = array.slice(middle)<br>  <span class="hljs-comment">// 使用递归，把问题规模减小</span><br>  <span class="hljs-keyword">return</span> merge(merge_sort(left), merge_sort(right))<br>&#125;<br><br><span class="hljs-keyword">let</span> merge = <span class="hljs-function">(<span class="hljs-params">left, right</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">let</span> res = []<br>  <span class="hljs-comment">// 用一个while循环得出两个数组中的最小元素，将其放入res中</span><br>  <span class="hljs-keyword">while</span> (left.length&gt;<span class="hljs-number">0</span> &amp;&amp; right.length&gt;<span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">if</span> (left[<span class="hljs-number">0</span>]&lt;right[<span class="hljs-number">0</span>]) &#123;<br>      res.push(left.shift())<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      res.push(right.shift())<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> res.concat(left, right)<br>&#125;<br><br><span class="hljs-built_in">console</span>.log(merge_sort([<span class="hljs-number">22</span>, <span class="hljs-number">34</span>, <span class="hljs-number">3</span>, <span class="hljs-number">32</span>, <span class="hljs-number">82</span>, <span class="hljs-number">55</span>, <span class="hljs-number">89</span>, <span class="hljs-number">50</span>, <span class="hljs-number">37</span>, <span class="hljs-number">5</span>, <span class="hljs-number">64</span>, <span class="hljs-number">35</span>, <span class="hljs-number">9</span>, <span class="hljs-number">70</span>]))<br><br></code></pre></td></tr></table></figure><table><thead><tr><th>名字</th><th>最好时间复杂度</th><th>最坏时间复杂度</th><th>平均时间复杂度</th><th>空间复杂度</th><th>是否稳定</th></tr></thead><tbody><tr><td>归并排序</td><td>nlog(n)</td><td>nlog(n)</td><td>nlog(n)</td><td>n</td><td>是</td></tr></tbody></table><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><h3 id="算法介绍-2"><a href="#算法介绍-2" class="headerlink" title="算法介绍"></a>算法介绍</h3><p><strong>快速排序</strong>（英语：Quicksort），又称<strong>分区交换排序</strong>（partition-exchange sort），简称<strong>快排</strong>，一种<a href="https://zh.wikipedia.org/wiki/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95">排序算法</a>，最早由<a href="https://zh.wikipedia.org/wiki/%E6%9D%B1%E5%B0%BC%C2%B7%E9%9C%8D%E7%88%BE">东尼·霍尔</a>提出。在平均状况下，排序n个项目需要O(nlog(n))次比较。在最坏状况下则需要O(n²)次比较，但这种状况并不常见。事实上，快速排序通常明显比其他算法更快，因为它的内部循环（inner loop)可以在大部分的架构上很有效率地达成。</p><h3 id="算法实现-5"><a href="#算法实现-5" class="headerlink" title="算法实现"></a>算法实现</h3><p>首先实现数组的分区代码函数，partition</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> partition = <span class="hljs-function">(<span class="hljs-params">array, start, end</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 定义一个数字pivot作为基准，用pivotIndex来跟踪其位置，用pivotValue来跟踪其值</span><br>  <span class="hljs-keyword">let</span> pivotIndex = <span class="hljs-number">0</span><br>  <span class="hljs-keyword">let</span> pivotValue = array[end]<br>  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>; i&lt;end; i++) &#123;<br>    <span class="hljs-comment">// 把所有比基准的值小的元素移到其位置的左边</span><br>    <span class="hljs-keyword">if</span> (array[i]&lt;pivotValue) &#123;<br>      [array[i], array[pivotIndex]] = [array[pivotIndex], array[i]]<br>      pivotIndex++<br>    &#125;<br>  &#125;<br>  <span class="hljs-comment">// 最后一步把基准（最后一个元素）与 在pivotIndex位置的值交换</span><br>  [array[end], array[pivotIndex]] = [array[pivotIndex], array[end]]<br>  <span class="hljs-keyword">return</span> pivotIndex<br>&#125;<br><br></code></pre></td></tr></table></figure><p>在排序的函数中用递归来把大问题划分成若干个小问题，只要这个函数收到一个不为空或有多个元素的数组，则将重复该过程</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> quick_sort = <span class="hljs-function">(<span class="hljs-params">array, start, end</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (start&gt;=end) &#123;<br>    <span class="hljs-keyword">return</span><br>  &#125;<br>  <span class="hljs-keyword">let</span> index = partition(array, start, end)<br>  quick_sort(array, start, index-<span class="hljs-number">1</span>)<br>  quick_sort(array, index+<span class="hljs-number">1</span>, end)<br>  <span class="hljs-keyword">return</span> array<br>&#125;<br><br><span class="hljs-built_in">console</span>.log(quick_sort([<span class="hljs-number">22</span>, <span class="hljs-number">34</span>, <span class="hljs-number">3</span>, <span class="hljs-number">32</span>, <span class="hljs-number">82</span>, <span class="hljs-number">55</span>, <span class="hljs-number">89</span>, <span class="hljs-number">50</span>, <span class="hljs-number">37</span>, <span class="hljs-number">5</span>, <span class="hljs-number">64</span>, <span class="hljs-number">35</span>, <span class="hljs-number">9</span>, <span class="hljs-number">70</span>],<span class="hljs-number">0</span>,<span class="hljs-number">13</span>))<br><br></code></pre></td></tr></table></figure><table><thead><tr><th>名字</th><th>最好时间复杂度</th><th>最坏时间复杂度</th><th>平均时间复杂度</th><th>空间复杂度</th><th>是否稳定</th></tr></thead><tbody><tr><td>快速排序</td><td>nlog(n)</td><td>n²</td><td>nlog(n)</td><td>log(n)</td><td>否</td></tr></tbody></table><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><p><a href="https://juejin.cn/post/6844903444365443080">十大经典排序算法总结（JavaScript描述）</a></p><p><a href="https://github.com/trekhleb/javascript-algorithms">javascript-algorithms</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js入门</title>
      <link href="/2021/08/02/nodejs%E5%85%A5%E9%97%A8/"/>
      <url>/2021/08/02/nodejs%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Node-js入门"><a href="#Node-js入门" class="headerlink" title="Node.js入门"></a>Node.js入门</h1><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><p>Node.js 是能够在服务器端运行 JavaScript 的开放源代码、跨平台运行环境，基于Google的V8引擎。<br>如果我们使用 PHP 来编写后端的代码时，需要 Apache 或者 Nginx 的 HTTP 服务器，并配上 mod_php5 模块和 php-cgi。不过对 Node.js 来说，概念完全不一样了。使用 Node.js 时，我们不仅仅 在实现一个应用，同时还实现了整个 HTTP 服务器。事实上，我们的 Web 应用以及对应的 Web 服务器基本上是一样的。</p><p>Node.js安装地址及方法：<br>地址：<a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a><br>方法：<a href="https://www.runoob.com/nodejs/nodejs-install-setup.html">https://www.runoob.com/nodejs/nodejs-install-setup.html</a></p><h2 id="2-npm"><a href="#2-npm" class="headerlink" title="2.npm"></a>2.npm</h2><h3 id="2-1-nmp使用"><a href="#2-1-nmp使用" class="headerlink" title="2.1 nmp使用"></a>2.1 nmp使用</h3><p>npm（全称 Node Package Manager，即“node包管理器”）是一个免费的模块分享社区，是Node.js默认的、用JavaScript编写的软件包管理系统，会随着Node.js一起安装，能解决NodeJS代码部署上的很多问题。<br>官网：<a href="https://www.npmjs.com/">https://www.npmjs.com/</a><br>npm有windows系统的全局变量，在命令行输入<code>npm -v</code>可以查看到当前安装的npm版本。<br>可以用npm来引入第三方的模块，我在这里以命令行颜色输出的模块colors为例，这个模块可以使命令行里面的字的样式变成别的颜色，地址为<a href="https://www.npmjs.com/package/colors">https://www.npmjs.com/package/colors</a> ，里面有使用方法</p><ul><li>在命令行中进入到要安装模块的目录，输入命令<code>npm install colors</code><br>安装完成后会出现node_modules文件夹和package-lock.json两个东西<br><img src="/img/node1.png" alt="node1.png"></li></ul><p>node_modules里面有封装好了的模块文件。</p><ul><li>在这个目录下新建一个app.js文件<br><img src="/img/img.png" alt="img.png"></li><li>在里面输入<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> colors = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;colors&#x27;</span>);<br> <br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;hello&#x27;</span>.green); <span class="hljs-comment">// outputs green text</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;i like cake and pies&#x27;</span>.underline.red) <span class="hljs-comment">// outputs red underlined text</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;inverse the color&#x27;</span>.inverse); <span class="hljs-comment">// inverses the color</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;OMG Rainbows!&#x27;</span>.rainbow); <span class="hljs-comment">// rainbow</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Run the trap&#x27;</span>.trap); <span class="hljs-comment">// Drops the bass</span><br> <br></code></pre></td></tr></table></figure></li><li>保存之后在原来的命令行中输入<code>node app.js</code><br>可以看到效果：<br><img src="/img/img_1.png" alt="img_1.png"></li></ul><h3 id="2-2-npm身份证"><a href="#2-2-npm身份证" class="headerlink" title="2.2 npm身份证"></a>2.2 npm身份证</h3><p>我们从npm中下载的modules文件夹被称为‘依赖’，我们可以使用package.json去管理这些的‘依赖’。需要创建一个身份证，通常创建项目第一件事就是新建身份证。</p><ul><li>新建一个项目文件夹</li><li>在命令行进入到响应的文件夹，输入命令<code>npm init</code></li><li>接着输入表单信息，包括包名，描述，版本号，作者等信息，可以按需回答，也可以回车跳过<br><img src="/img/img_2.png" alt="img_2.png"></li><li>填好后原来的文件夹之中会出现一个package.json文件，里面包含了身份证的信息</li><li>再次以模块colors为例，在命令行输入命令<code>npm install --save colors</code>,package.json文件中就会出现模块的依赖项<br><img src="/img/img_3.png" alt="img_3.png"></li></ul><p>这样做的原因：node_modules中的模块之间都是相互影响的，如果引入的模块特别多，进行文件传输时，可能会造成非常的大的影响。而只传身份证，<br>在下一次安装模块使用时，只要在项目文件夹下输入命令<code>npm install</code>，npm就会检索存放在package.json里面的信息，安装所有依赖。</p><h2 id="3-内置Node-js模块使用"><a href="#3-内置Node-js模块使用" class="headerlink" title="3.内置Node.js模块使用"></a>3.内置Node.js模块使用</h2><p>为了让Node.js的文件可以相互调用，Node.js提供了一个简单的模块系统。</p><p>模块是Node.js 应用程序的基本组成部分，文件和模块是一一对应的。换言之，一个 Node.js 文件就是一个模块，这个文件可能是JavaScript 代码、JSON 或者编译过的C/C++ 扩展。<br>除了可以使用npm来使用第三方模块之外，Node.js还提供了许多内置模块，见<a href="https://nodejs.org/docs/latest-v15.x/api/">https://nodejs.org/docs/latest-v15.x/api/</a><br>已文件系统模块fs为例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//引入http模块</span><br><span class="hljs-keyword">var</span> http= <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;http&quot;</span>);<br><span class="hljs-comment">//引入fs模块</span><br><span class="hljs-keyword">var</span> fs =<span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;fs&quot;</span>);<br><span class="hljs-comment">//用node.js创建服务器</span><br><span class="hljs-keyword">var</span> server=http.createServer(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(req.url);<br>    <span class="hljs-comment">//更改http报文的头部，设置编码为utf8</span><br>    res.setHeader(<span class="hljs-string">&quot;Content-Type&quot;</span>,<span class="hljs-string">&quot;text/html;charset=UTF8&quot;</span>)<br>    <span class="hljs-comment">//自定义路由</span><br>    <span class="hljs-keyword">if</span>(req.url===<span class="hljs-string">&quot;/xiao&quot;</span>)<br>    &#123;<br>        <span class="hljs-comment">//用fs来读取模块</span><br>        fs.readFile(<span class="hljs-string">&quot;./public/wen.txt&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err,data</span>)</span>&#123;<br>            res.end(data)<br>        &#125;)<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        res.end(<span class="hljs-string">&quot;页面不存在&quot;</span>)<br>    &#125;<br>&#125;)<br><span class="hljs-comment">//监听端口</span><br>server.listen(<span class="hljs-number">6531</span>)<br></code></pre></td></tr></table></figure><p>通过这种方式，可以建立一个服务器，设计路由，从而方便网页的访问</p>]]></content>
      
      
      <categories>
          
          <category> 知识笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue组件简析</title>
      <link href="/2021/07/26/Vue%E7%BB%84%E4%BB%B6%E7%AE%80%E6%9E%90/"/>
      <url>/2021/07/26/Vue%E7%BB%84%E4%BB%B6%E7%AE%80%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue组件简析"><a href="#Vue组件简析" class="headerlink" title="Vue组件简析"></a>Vue组件简析</h1><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><p>组件（Component）是 Vue.js 最强大的功能之一。</p><p>组件可以扩展 HTML 元素，封装可重用的代码。</p><p>组件系统让我们可以用独立可复用的小组件来构建大型应用，几乎任意类型的应用的界面都可以抽象为一个组件树：</p><p><img src="https://www.runoob.com/wp-content/uploads/2017/01/components.png" alt="img"></p><p><strong>组件是可复用的 Vue 实例，它们与 <code>new Vue</code> 接收相同的选项</strong>，例如 <code>data</code>、<code>computed</code>、<code>watch</code>、<code>methods</code> 以及生命周期钩子等。仅有的例外是像 <code>el</code> 这样根实例特有的选项。</p><p>通常一个应用会以一棵嵌套的组件树的形式来组织，例如，你可能会有页头、侧边栏、内容区等组件，每个组件又包含了其它的像导航链接、博文之类的组件。</p><p>为了能在模板中使用，这些组件必须先注册以便 Vue 能够识别。这里有两种组件的注册类型：<strong>全局注册</strong>和<strong>局部注册</strong>。接下来介绍一下这两种注册方式。</p><hr><h2 id="2-全局注册"><a href="#2-全局注册" class="headerlink" title="2.全局注册"></a>2.全局注册</h2><p>全局注册分为三部分：</p><h4 id="2-1-构建模板对象"><a href="#2-1-构建模板对象" class="headerlink" title="2.1.构建模板对象"></a>2.1.构建模板对象</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;!--html代码用反引号括起来--&gt;<br><span class="hljs-keyword">const</span> htmlElement=Vue.extend(&#123;<br><span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-keyword">return</span> &#123;<br><span class="hljs-attr">count</span> : <span class="hljs-number">0</span><br>&#125;<br>&#125;,<br><span class="hljs-attr">template</span>:<span class="hljs-string">`</span><br><span class="hljs-string">&lt;button v-on:click=&quot;count++&quot;&gt;</span><br><span class="hljs-string">          &lt;h3&gt;注册全局组件&lt;/h3&gt; </span><br><span class="hljs-string">          点击量：&#123;&#123;count&#125;&#125;</span><br><span class="hljs-string">&lt;/button&gt;</span><br><span class="hljs-string">`</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>上面的Vue.extend()是一个基础构造器(全局 API)，意图创建一个子类；</p><p><strong>一个组件的 <code>data</code> 选项必须是一个函数</strong>，它返回的是一个对象，内含数据键值对，因此每个实例可以维护一份被返回对象的独立的拷贝，而<strong>不是</strong>像这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">data: &#123;<br>  <span class="hljs-attr">count</span>: <span class="hljs-number">0</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-2-注册全局组件"><a href="#2-2-注册全局组件" class="headerlink" title="2.2.注册全局组件"></a>2.2.注册全局组件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">Vue.component(<span class="hljs-string">&#x27;lhy&#x27;</span>,htmlElement);<br></code></pre></td></tr></table></figure><p>上面的Vue.component()是注册组件，参数 1 为组件名称，参数 2 为.extend()；详情看<a href="https://cn.vuejs.org/v2/api/#Vue-component">官方文档API部分</a></p><h4 id="3-视图输出"><a href="#3-视图输出" class="headerlink" title="3.视图输出"></a>3.视图输出</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">lhy</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">lhy</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这样一个全局组件就注册好了。</p><p>除了这一种方式之外我们也可以省略掉 Vue.extend()这一步，将构造内容直接作为参数传递</p><p>像这样：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">lhy</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">lhy</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><br>Vue.component(&#x27;lhy&#x27;, &#123;<br><br>data() &#123;<br><br>return &#123;<br><br>count : 0<br><br>&#125;<br><br>&#125;,<br><br>    template :<br><br>    `<br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;count++&quot;</span>&gt;</span><br>    点击量：&#123;&#123;count&#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br>    `<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="3-局部注册"><a href="#3-局部注册" class="headerlink" title="3.局部注册"></a>3.局部注册</h2><p>刚刚的方式，是组件的全局注册方式，意味其它 Vue 实例也可以访问</p><p>如果想要只限某个 Vue 实例，可以设置局部注册方法</p><h4 id="3-1-创建一个组件"><a href="#3-1-创建一个组件" class="headerlink" title="3.1.创建一个组件"></a>3.1.创建一个组件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> htmlElement=&#123;<br><span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">return</span>&#123;<br><span class="hljs-attr">count</span>:<span class="hljs-number">0</span>,<br>&#125;<br>&#125;,<br><span class="hljs-attr">template</span>:<span class="hljs-string">`</span><br><span class="hljs-string">&lt;button @click=&quot;count++&quot;&gt;点击次数&#123;&#123;count&#125;&#125;&lt;/button&gt;</span><br><span class="hljs-string">`</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-2-绑定组件注册"><a href="#3-2-绑定组件注册" class="headerlink" title="3.2.绑定组件注册"></a>3.2.绑定组件注册</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> app=<span class="hljs-keyword">new</span> Vue(&#123;<br><span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#app&#x27;</span>,<br><span class="hljs-attr">components</span>:&#123;<br><span class="hljs-string">&#x27;lhy&#x27;</span>:htmlElement<br>&#125;,<br>&#125;)<br></code></pre></td></tr></table></figure><p>在局部注册中，不用extend()方法，因为extend是<strong>全局API</strong></p><hr><h2 id="4-组件的嵌套"><a href="#4-组件的嵌套" class="headerlink" title="4.组件的嵌套"></a>4.组件的嵌套</h2><p>组件和组件之间可以嵌套，形成一种父子关系的组件</p><p>例如，我们先注册两个父组件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!--第一个父组件--&gt;<br>Vue.component(<span class="hljs-string">&#x27;f1&#x27;</span>,&#123;<br>    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span>  &#123;<br>      <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;一号父组件&#x27;</span><br>      &#125;<br>    &#125;,<br>    <span class="hljs-attr">template</span>:<span class="hljs-string">`&lt;div&gt;</span><br><span class="hljs-string">                  &#123;&#123;message&#125;&#125;</span><br><span class="hljs-string">              &lt;/div&gt;`</span><br>                   ,<br>  &#125;);<br>&lt;!--第二个父组件--&gt;<br>Vue.component(<span class="hljs-string">&#x27;f2&#x27;</span>,&#123;<br>    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span>  &#123;<br>      <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;二号父组件&#x27;</span><br>      &#125;<br>    &#125;,<br>    <span class="hljs-attr">template</span>:<span class="hljs-string">`&lt;div&gt;</span><br><span class="hljs-string">                  &#123;&#123;message&#125;&#125;</span><br><span class="hljs-string">              &lt;/div&gt;`</span><br>                   ,<br>  &#125;);<br></code></pre></td></tr></table></figure><p>Vue.Compnents 第二个参数其实就是 Vue 构造子集，可以继续嵌套。</p><p>我们可以在原来的基础上，对第一个父组件进行嵌套</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!--在外面定义一个子组件--&gt;<br><span class="hljs-keyword">const</span> deson=&#123;<br><br>      <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span>&#123;<br>          <span class="hljs-attr">message</span>:<span class="hljs-string">&#x27;在外面定义的子组件&#x27;</span><br>        &#125;<br>      &#125;,<br>      <span class="hljs-attr">template</span>:<span class="hljs-string">`&lt;div&gt;</span><br><span class="hljs-string">&#123;&#123;message&#125;&#125;</span><br><span class="hljs-string">          &lt;/div&gt;</span><br><span class="hljs-string">`</span><br>  &#125;<br><br>Vue.component(<span class="hljs-string">&#x27;f1&#x27;</span>,&#123;<br>    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span>  &#123;<br>      <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;一号父组件&#x27;</span><br>      &#125;<br>    &#125;,<br>    <span class="hljs-attr">template</span>:<span class="hljs-string">`&lt;div&gt;</span><br><span class="hljs-string">        &lt;div&gt;</span><br><span class="hljs-string">&#123;&#123;message&#125;&#125;</span><br><span class="hljs-string">                &lt;/div&gt;</span><br><span class="hljs-string">                &lt;son1&gt;&lt;/son1&gt;</span><br><span class="hljs-string">            &lt;son2&gt;&lt;/son2&gt;</span><br><span class="hljs-string">               &lt;/div&gt;`</span>,<br>    <span class="hljs-attr">components</span>: &#123;<br>&lt;!--在里面定义一个子组件--&gt;<br>      <span class="hljs-string">&#x27;son1&#x27;</span>:&#123;<br>        <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span>&#123;<br>          <span class="hljs-keyword">return</span>&#123;<br>            <span class="hljs-attr">message</span>:<span class="hljs-string">&#x27;在里面定义的子组件&#x27;</span><br>          &#125;<br>      &#125;,<br>        <span class="hljs-attr">template</span>:<span class="hljs-string">`&lt;div&gt;&#123;&#123;message&#125;&#125;&lt;/div&gt;`</span><br>      &#125;,<br>&lt;!--绑定在外面定义的子组件--&gt;<br>      <span class="hljs-string">&#x27;son2&#x27;</span>:deson,<br>    &#125;<br>  &#125;);<br>  Vue.component(<span class="hljs-string">&#x27;asshole&#x27;</span>,&#123;<br>    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span>  &#123;<br>      <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;二号父组件&#x27;</span><br>      &#125;<br>    &#125;,<br>    <span class="hljs-attr">template</span>:<span class="hljs-string">`&lt;div&gt;&#123;&#123;message&#125;&#125;&lt;/div&gt;`</span>,<br>  &#125;);<br></code></pre></td></tr></table></figure><p>而html为</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">f1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">f1</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">f2</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">f2</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>最终的效果如图：</p><p><img src="./img/vue.png" alt="image-20210726173939968"></p><p>其中在外面创建的子组件，是一个独立的子组件，可以用于直接传入其它父组件</p><hr><h2 id="5-props"><a href="#5-props" class="headerlink" title="5.props"></a>5.props</h2><h4 id="5-1-props通信"><a href="#5-1-props通信" class="headerlink" title="5.1.props通信"></a>5.1.props通信</h4><p>组件的父子关系中，当设置一个独立组件时，这个组件就是 new Vue()的子组件</p><p>当我们需要通过子组件显示父组件 data 值的时候，需要通过 props 属性传值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 这个组件是 Vue 实例的子组件</span><br><span class="hljs-keyword">const</span> childComponent = &#123;<br><span class="hljs-attr">template</span> : <span class="hljs-string">`</span><br><span class="hljs-string">&lt;div&gt;&#123;&#123;text&#125;&#125;&lt;/div&gt;</span><br><span class="hljs-string">`</span>,<br><span class="hljs-attr">props</span> : [<span class="hljs-string">&#x27;text&#x27;</span>]<br>&#125;;<br><br><span class="hljs-comment">//根组件</span><br><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;<br><span class="hljs-attr">el</span> : <span class="hljs-string">&#x27;#app&#x27;</span>,<br><span class="hljs-attr">data</span> : &#123;<span class="hljs-attr">message</span>:<span class="hljs-string">&#x27;Hello&#x27;</span>&#125;,<br><span class="hljs-attr">components</span> : &#123;<br><span class="hljs-string">&#x27;html-a&#x27;</span> : childComponent<br>&#125;,<br>&#125;);<br><br></code></pre></td></tr></table></figure><p>在这里父组件中data里面message的值会通过v-bind传入到子组件的html中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    //使用 v-bind 才能将父组件的 data 值绑定到子组件使用；<br>    <span class="hljs-tag">&lt;<span class="hljs-name">html-a</span> <span class="hljs-attr">v-bind:text</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html-a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="5-2-props类型"><a href="#5-2-props类型" class="headerlink" title="5.2.props类型"></a>5.2.props类型</h4><p>从父组件给子组件通信，子组件不单单可以得到字符串类型，还可以是其它类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//数据对象</span><br><span class="hljs-keyword">const</span> dataObj = &#123;<br>    <span class="hljs-attr">message</span> : <span class="hljs-string">&#x27;Hello, Vue!&#x27;</span>,<br>    <span class="hljs-attr">array</span> : [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>],<br>    <span class="hljs-attr">object</span> : &#123;<br>        <span class="hljs-attr">name</span> : <span class="hljs-string">&#x27;Mr.Lee&#x27;</span>,<br>        <span class="hljs-attr">age</span> : <span class="hljs-number">100</span><br>&#125;,<br>    <span class="hljs-attr">flag</span> : <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">number</span> : <span class="hljs-number">200</span>,<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html-a</span> <span class="hljs-attr">v-bind:text</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html-a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html-a</span> <span class="hljs-attr">v-bind:text</span>=<span class="hljs-string">&quot;flag&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html-a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html-a</span> <span class="hljs-attr">v-bind:text</span>=<span class="hljs-string">&quot;number&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html-a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html-a</span> <span class="hljs-attr">v-bind:text</span>=<span class="hljs-string">&quot;array[4]&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html-a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html-a</span> <span class="hljs-attr">v-bind:text</span>=<span class="hljs-string">&quot;number&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html-a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html-a</span> <span class="hljs-attr">v-bind:text</span>=<span class="hljs-string">&quot;array&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html-a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html-a</span> <span class="hljs-attr">v-bind:text</span>=<span class="hljs-string">&quot;object&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html-a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html-a</span> <span class="hljs-attr">v-bind:text</span>=<span class="hljs-string">&quot;object.name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html-a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html-a</span> <span class="hljs-attr">v-bind:text</span>=<span class="hljs-string">&quot;message + &#x27; + &#x27; + number&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html-a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html-a</span> <span class="hljs-attr">v-bind:text</span>=<span class="hljs-string">&quot;flag&quot;</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;flag&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html-a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>上面的子类中，text 包含了所有的父组件的值</p><p>而这种方式只能在绑定里组合更多的值，而不能在模版中组合更多的值</p><h4 id="5-3-组件的单向数据流"><a href="#5-3-组件的单向数据流" class="headerlink" title="5.3.组件的单向数据流"></a>5.3.<strong>组件的单向数据流</strong></h4><p>父组件的 data 值更新后通过 props 选项交给子组件进行渲染，反之则不行；</p><p> 这就是单向数据流(单向下行绑定)，不能通过子组件来改变父组件的状态；</p><p>这样做的是为了防止父组件发生改变后，数据流变得难以理解；</p><p>父组件更新时，子组件所有 props 值也会更新，你不能改变子组件的 props 值；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//父组件</span><br><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;<br><span class="hljs-attr">el</span> : <span class="hljs-string">&#x27;#app&#x27;</span>,<br>        <span class="hljs-attr">data</span> : &#123;<br>        <span class="hljs-attr">count</span> : <span class="hljs-number">0</span><br>    &#125;,<br>    <span class="hljs-attr">components</span> : &#123;<br>        <span class="hljs-string">&#x27;html-a&#x27;</span> : &#123;<br>            <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;<br>                <span class="hljs-keyword">return</span> &#123;<br>                    <span class="hljs-attr">message</span> : <span class="hljs-string">&#x27;子组件&#x27;</span>,<br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">template</span> : <span class="hljs-string">`</span><br><span class="hljs-string">    &lt;button v-on:click=&quot;count++&quot;&gt;&#123;&#123;count&#125;&#125;&lt;/button&gt;</span><br><span class="hljs-string">    `</span>,<br>    <span class="hljs-attr">props</span> : [<span class="hljs-string">&#x27;count&#x27;</span>],<br>&#125;<br>&#125;,<br>&#125;)<br></code></pre></td></tr></table></figure><p>以上的代码从子组件改变从父组件传下来的值，这样会正确改变了 props 的值，也渲染到视图中，但控制台报错。</p><p>因为我们不可以直接修改 props 值，可以通过数据或计算属性来解决</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//其中的count是父组件中data里面的值，将count传给子组件里面的childCount</span><br><span class="hljs-attr">components</span> : &#123;<br><span class="hljs-string">&#x27;html-a&#x27;</span> : &#123;<br>            <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;<br>                <span class="hljs-keyword">return</span> &#123;<br>                    <span class="hljs-attr">message</span> : <span class="hljs-string">&#x27;子组件&#x27;</span>,<br>                    <span class="hljs-attr">childCount</span> : <span class="hljs-built_in">this</span>.count<br>                &#125;<br>            &#125;,<br>            <span class="hljs-attr">template</span> : <span class="hljs-string">`</span><br><span class="hljs-string">                &lt;button v-on:click=&quot;childCount++&quot;&gt;&#123;&#123;childCount&#125;&#125;&lt;/button&gt;</span><br><span class="hljs-string">                `</span>,<br>            <span class="hljs-attr">props</span> : [<span class="hljs-string">&#x27;count&#x27;</span>]<br>&#125;<br>&#125;,<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//通过使用计算属性和方法数据更改</span><br><span class="hljs-attr">components</span> : &#123;<br>    <span class="hljs-string">&#x27;html-a&#x27;</span> : &#123;<br>            <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;<br>                <span class="hljs-keyword">return</span> &#123;<br>                    <span class="hljs-attr">message</span> : <span class="hljs-string">&#x27;子组件&#x27;</span>,<br>                    <span class="hljs-attr">childCount</span> : <span class="hljs-built_in">this</span>.count<br>                &#125;<br>    &#125;,<br>    <span class="hljs-attr">template</span> : <span class="hljs-string">`</span><br><span class="hljs-string">                &lt;button</span><br><span class="hljs-string">                v-on:click=&quot;clickChildCount&quot;&gt;&#123;&#123;changeChildCount&#125;&#125;&lt;/button&gt;</span><br><span class="hljs-string">    `</span>,<br>            <span class="hljs-attr">props</span> : [<span class="hljs-string">&#x27;count&#x27;</span>],<br>    <span class="hljs-attr">computed</span>: &#123;<br>    <span class="hljs-function"><span class="hljs-title">changeChildCount</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.childCount;<br>    &#125;,<br>    &#125;,<br>    <span class="hljs-attr">methods</span> : &#123;<br>    <span class="hljs-function"><span class="hljs-title">clickChildCount</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.childCount++;<br>    &#125;<br>    &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>参考资料：</p><blockquote><p><a href="https://cn.vuejs.org/">Vue官方文档</a><br><a href="https://www.runoob.com/vue2/vue-tutorial.html">菜鸟教程vue.js</a><br><a href="https://www.bilibili.com/video/BV1Qp4y1Q7nx?p=6">李炎恢教程</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 知识笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/07/21/hello-world/"/>
      <url>/2021/07/21/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
